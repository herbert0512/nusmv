MODULE main
	VAR
		demandNS	: 	boolean; 	--Based on weight sensor and walk button
		demandEW	: 	boolean;
		emergencyNS	:	boolean; 	--Based on emergency sensor
		emergencyEW	:	boolean;
		entering	: 	boolean; 	--True if a light is turning green (lock)
		exiting		:	boolean; 	--True if a light is turning red (lock)	
		initStatusEntering	:	{myentering, myexiting, myidle};
		initStatusIdle		:	{myentering, myexiting, myidle};
		lightEW		:	process light(demandNS, emergencyNS, entering, exiting, initStatusEntering);
		lightNS		:	process	light(demandEW, emergencyEW, entering, exiting, initStatusIdle);
		
	ASSIGN
		init(demandNS)		:= FALSE;
		init(demandEW)		:= FALSE;
		init(emergencyNS) 	:= FALSE;
		init(emergencyEW) 	:= FALSE;
		init(entering) 		:= TRUE;
		init(exiting) 		:= FALSE;
		init(initStatusEntering) 	:= myentering;
		init(initStatusIdle) 		:= myidle;

		--If light is green, demand can become false. If light is red, true demand will stay true
		next(demandEW)	:=
			case
				lightEW.color = red & demandEW 	: {TRUE};
				TRUE							: {TRUE, FALSE};
			esac;
		next(demandNS)	:=
			case
				lightNS.color = red & demandNS 	: {TRUE};
				TRUE							: {TRUE, FALSE};
			esac;
		
		--When light is green, emergency will end. Otherwise the same as demand.
		next(emergencyNS)	:=
			case
				lightNS.color = green 			  		: {FALSE};
				lightNS.color != green & emergencyNS 	: {TRUE};
				TRUE									: {TRUE, FALSE};
			esac;
		next(emergencyEW)	:=
			case
				lightEW.color = green					: {FALSE};
				lightEW.color != green & emergencyEW 	: {TRUE};
				TRUE									: {TRUE, FALSE};
			esac;
	
	--Only one light can be green at a time
	SPEC AG !(lightEW.color = green & lightNS.color = green)
	
	--If EW is green, NS will not allow walking 
	SPEC AG !(lightEW.color = green & lightNS.walking = on)

	--If EW is green, then EW will eventually become red.
	--In our implimentation this is not true as shown in our writeup.
	SPEC AG (lightEW.color = green -> AF lightEW.color = red)
	
	--If EW is red, but has demand, eventually EW will be green.
	LTLSPEC G ((lightEW.color = red & demandEW) -> F lightEW.color = green)
	
	--The NS light will eventually turn green after an emergency is raised NS.
	LTLSPEC G ((emergencyNS & Y(!emergencyNS)) -> F lightNS.color = green)
	
	FAIRNESS
		running
MODULE light( otherDemand, emergency, entering, exiting, initstatus)
	VAR
		color 	: {green, yellow, red};
		walking : {on, flashing, off};
		status 	: {myentering, myexiting, myidle};
		
	ASSIGN
		init(color) 	:= red;
		init(walking) 	:= off;
		init(status) 	:= initstatus;
		next(color) :=
			case
				color = red & entering & status = myentering & !exiting		: green;
				color = green & emergency & !entering & !exiting			: yellow;
				color = green & walking = flashing 	& !entering & !exiting	: yellow;
				color = yellow	 & entering & status = myexiting			: red;
				TRUE														: color;
			esac;
		next(walking) :=
			case
				color = red & entering & status = myentering & !exiting		: on;
				otherDemand & walking = on									: flashing;
				color = green & emergency & !entering & !exiting 			: off;
				color = green & walking = flashing 	& !entering & !exiting	: off;
				TRUE														: walking;
			esac;
		next(entering) :=
			case
				color = red & exiting & !entering & status = myidle			: TRUE;
				color = red & entering & status = myentering & !exiting		: FALSE;
				TRUE														: entering;
			esac;
		next(exiting) :=
			case
				color = yellow 	& !entering & !exiting & status = myidle 	: TRUE;
				color = red	 & entering & status = myexiting				: FALSE;
				TRUE														: exiting;
			esac;
		next(status) :=
			case
				color = red & exiting & !entering & status = myidle 		: myentering;
				color = yellow 	& !entering & !exiting & status = myidle	: myexiting;
				color = red	 & !exiting & status = myentering				: myidle;
				color = red & entering & status = myexiting					: myidle;
				TRUE														: status;
			esac;
	FAIRNESS
		running
			
				
			
	
